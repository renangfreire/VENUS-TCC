// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  name     String
  password String
  cpf      String
  email    String    @unique
  sexo     String?
  tel      String?
  admin    AdminRole @default(USER)

  orders  Orders[]
  address UserAddresses[]

  @@map("users")
}

model UserAddresses {
  id String @id @default(uuid())

  cep           String
  rua           String
  identificacao String
  bairro        String
  estado        String
  cidade        String
  complemento   String?
  padrao        Boolean @default(false)
  destinatario  String
  idenEndereco  String

  userId String

  Orders Orders[]

  User User @relation(references: [id], fields: [userId])

  @@map("usersAddresses")
}

model Orders {
  id String @id @default(uuid())

  valorTotal  Decimal
  valorFrete  Decimal
  dateOrdered DateTime    @default(now())
  statusOrder StatusOrder @default(PEDIDO_RECEBIDO)
  rastreio    String?

  userId          String
  userAddressesId String
  paymentDetails  Payment_details?

  products ProductsOnOrder[]

  shippingAddress UserAddresses @relation(fields: [userAddressesId], references: [id])

  User User @relation(fields: [userId], references: [id])

  @@map("orders")
}

model Payment_details {
  id String @id @default(uuid())

  amount             Decimal
  statusPag          StatusPag
  createdAt          DateTime  @default(now())
  orderId            String    @unique
  installments       Int?
  installment_amount Float?
  methodPayment      String

  orders Orders @relation(fields: [orderId], references: [id])
}

model Products {
  id String @id @unique

  name   String
  // description String 
  value  Decimal
  images Json

  category CategoriesOnProducts[]
  Orders   ProductsOnOrder[]
  color    ProductColors[]
  size     ProductSizes[]
  Stock    Stock[]

  @@map("products")
}

model ProductsOnOrder {
  id String @id @default(uuid())

  ordersId   String
  productsId String
  colorsId   String
  sizesId    String
  quantity   Int

  Products Products      @relation(fields: [productsId], references: [id])
  Orders   Orders        @relation(fields: [ordersId], references: [id])
  Colors   ProductColors @relation(fields: [colorsId], references: [id])
  Sizes    ProductSizes  @relation(fields: [sizesId], references: [id])
}

model ProductColors {
  id String @id @default(uuid())

  id_product String
  color      Color

  product         Products          @relation(fields: [id_product], references: [id])
  Stock           Stock[]
  ProductsOnOrder ProductsOnOrder[]

  @@map("productColors")
}

model ProductSizes {
  id String @id @default(uuid())

  id_product String
  size       Size
  Stock      Stock?

  product         Products          @relation(fields: [id_product], references: [id])
  ProductsOnOrder ProductsOnOrder[]

  @@map("productSizes")
}

model CategoriesOnProducts {
  id String @id @default(uuid())

  productsId   String
  categoriesId String

  Products   Products   @relation(fields: [productsId], references: [id])
  Categories Categories @relation(fields: [categoriesId], references: [id])
}

model Categories {
  id String @id @default(uuid())

  name String @unique

  productsId CategoriesOnProducts[]
}

model Stock {
  id String @id @default(uuid())

  quantidade Int
  productsId String

  productColorsId String @unique
  productSizesId  String @unique

  product Products      @relation(fields: [productsId], references: [id])
  color   ProductColors @relation(fields: [productColorsId], references: [id])
  sizes   ProductSizes  @relation(fields: [productSizesId], references: [id])

  @@map("stock")
}

enum Color {
  UNICO
  PRETO
  ROSA
  BRANCO
  VERDE
  AZUL
}

enum Size {
  UNICO
  P
  M
  G
  GG
  XG
}

enum StatusOrder {
  PEDIDO_RECEBIDO
  PEDIDO_SEPARACAO
  NOTA_FISCAL_EMITIDA
  PRODUTO_EXPEDIDO
  ENVIADO
  PEDIDO_EM_TRANSITO
  ROTA_ENTREGA
  ENTREGUE
}

enum StatusPag {
  PENDING
  INPROCESS
  REJECTED
  CANCELED
  APPROVED
}

enum AdminRole {
  ADMIN
  USER
}
